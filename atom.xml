<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Norld&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://norld.com/"/>
  <updated>2017-12-22T07:47:46.000Z</updated>
  <id>http://norld.com/</id>
  
  <author>
    <name>Norld</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>获取 XCAsset 中 mp4, mp3 等非图片资源</title>
    <link href="http://norld.com/2017/12/22/%E8%8E%B7%E5%8F%96%20XCAsset%20%E4%B8%AD%20mp4,%20mp3%20%E7%AD%89%E9%9D%9E%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90/"/>
    <id>http://norld.com/2017/12/22/获取 XCAsset 中 mp4, mp3 等非图片资源/</id>
    <published>2017-12-22T07:38:50.000Z</published>
    <updated>2017-12-22T07:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>在 <code>xcasset</code> 添加 <code>Data Set</code> 内容, 如 <code>.mp3</code>, <code>.mp4</code> 等非图片内容时, 通过 <code>NSBundle</code> 无法获取文件路径, <code>-[NSBundle pathForResource:ofType:]</code> 方法返回为 <code>nil</code>.</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>不改变文件存放位置的前提下, 获取文件的路径或二进制内容.</p><a id="more"></a><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p><code>Assets.xcassets</code> 内选择 <code>+</code> -&gt; 选择 <code>New Data Set</code>, 将 <code>demo.mp4</code> 添加到指定位置, Set 的名字重名为 <code>test</code>.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>通过 <code>NSDataAsset</code> 类来获取 <code>xcasset</code> 文件夹内的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// xcasset 内包含 test.mp4 Data Set</span><br><span class="line">NSString *fileName = @&quot;test&quot;;</span><br><span class="line">NSDataAsset *dataAsset = [[NSDataAsset alloc] initWithName:fileName];</span><br><span class="line">[dataAsset.data writeToFile:/* save file path */ atomically:YES]</span><br><span class="line">NSURL *filePath = [NSURL fileURLWithPath:/* save file path */];</span><br></pre></td></tr></table></figure><p>至此, 就可以获取 <code>xcasset</code> 中非图片资源了</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>NSDataAsset</code> 为 <font color="red"><strong>iOS 9.0 及以上</strong></font> 才可使用的方法</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><a href="https://developer.apple.com/documentation/uikit/nsdataasset?language=objc" target="_blank" rel="noopener">NSDataAsset</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;xcasset&lt;/code&gt; 添加 &lt;code&gt;Data Set&lt;/code&gt; 内容, 如 &lt;code&gt;.mp3&lt;/code&gt;, &lt;code&gt;.mp4&lt;/code&gt; 等非图片内容时, 通过 &lt;code&gt;NSBundle&lt;/code&gt; 无法获取文件路径, &lt;code&gt;-[NSBundle pathForResource:ofType:]&lt;/code&gt; 方法返回为 &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;p&gt;不改变文件存放位置的前提下, 获取文件的路径或二进制内容.&lt;/p&gt;
    
    </summary>
    
      <category term="开发学习" scheme="http://norld.com/categories/%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://norld.com/tags/iOS/"/>
    
      <category term="XCAsset" scheme="http://norld.com/tags/XCAsset/"/>
    
      <category term="日积月累" scheme="http://norld.com/tags/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    
      <category term="编程技巧" scheme="http://norld.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Core Foundation 学习 -- 图片质量的压缩与转换</title>
    <link href="http://norld.com/2017/03/21/Core%20Foundation%20%E5%AD%A6%E4%B9%A0%20--%20%E5%9B%BE%E7%89%87%E8%B4%A8%E9%87%8F%E7%9A%84%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%BD%AC%E6%8D%A2/"/>
    <id>http://norld.com/2017/03/21/Core Foundation 学习 -- 图片质量的压缩与转换/</id>
    <published>2017-03-21T10:02:00.000Z</published>
    <updated>2017-03-22T06:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>&emsp;&emsp;在 UIKit 中有两种图片质量压缩与转换的写法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIImageJPEGRepresentation(image, 0.75);</span><br><span class="line">UIImagePNGRepresentation(image);</span><br></pre></td></tr></table></figure><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>&emsp;&emsp;用 <code>Core Foundation</code> 实现相同功能</p><a id="more"></a><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>创建 <code>Translate</code> 类的相关文件<ul><li>包含 <code>Translate.h</code> 和 <code>Translate.m</code> 文件</li><li>删除所有 <code>@interface</code> 和 <code>@implementation</code> 相关的内容<ul><li>这一步可不做, 之后的内容并没有操作 <code>Translate</code> 的类或实例对象</li></ul></li></ul></li><li><p>在 <code>Translate.h</code> 中</p><ul><li><p>创建结果相关的 Blok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef void(^complet)(BOOL isSuccess);</span><br></pre></td></tr></table></figure></li><li><p>创建格式转换相关的枚举</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSUInteger, kUTType) &#123;</span><br><span class="line">    kUTTypeJPEG,</span><br><span class="line">    kUTTypePNG</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>声明定义压缩转换方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extern void TImageRepresentation(NSString *sourceImagePath,NSString *targetImagePatch,double compressionQuality,kUTType type,complet complet);</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><table><thead><tr><th>参数</th><th>格式</th><th>定义</th></tr></thead><tbody><tr><td>sourceImagePath</td><td><code>NSString *</code></td><td>原图片文件路径</td></tr><tr><td>targetImagePatch</td><td><code>NSString *</code></td><td>输出路径, 必须包含文件名与后缀</td></tr><tr><td>compressionQuality</td><td><code>double</code></td><td>图片压缩质量, 范围 0~1, 1为最高质量</td></tr><tr><td>type</td><td><code>kUTType</code></td><td>输出格式, 务必与输出路径的后缀相同</td></tr><tr><td>complet</td><td><code>Block</code></td><td>输出结果的回调</td></tr></tbody></table></blockquote><ul><li><p>在 <code>Translate.m</code> 中</p><ul><li><p>引入相关头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;ImageIO/ImageIO.h&gt;</span><br><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br></pre></td></tr></table></figure></li><li><p>开始实现压缩转换方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void TImageRepresentation(NSString *sourceImagePath,</span><br><span class="line">                          NSString *targetImagePatch,</span><br><span class="line">                          double compressionQuality,</span><br><span class="line">                          kUTType type,</span><br><span class="line">                          complet complet) &#123;</span><br><span class="line">    // do something...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启子线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">    // do something...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取图片源数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGImageRef image = [UIImage imageWithContentsOfFile:sourceImagePath].CGImage;</span><br></pre></td></tr></table></figure></li><li><p>创建接收最终数据的目标容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFMutableDataRef imageData = CFDataCreateMutable(NULL, 0);</span><br></pre></td></tr></table></figure></li><li><p>判断转换格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CFStringRef typeStr;</span><br><span class="line">switch (type) &#123;</span><br><span class="line">    case kUTTypeJPEG:</span><br><span class="line">        typeStr = CFSTR(&quot;public.jpeg&quot;);</span><br><span class="line">        break;</span><br><span class="line">            </span><br><span class="line">    case kUTTypePNG:</span><br><span class="line">        typeStr = CFSTR(&quot;public.png&quot;);</span><br><span class="line">        break;</span><br><span class="line">            </span><br><span class="line">    default:</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建转换者对象, 进行质量压缩和转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGImageDestinationRef destination = CGImageDestinationCreateWithData(imageData, typeStr, 1, NULL);</span><br></pre></td></tr></table></figure><p><code>CGImageDestinationCreateWithData(_,_,_,_)</code> 函数的<a href="https://developer.apple.com/reference/imageio/1465133-cgimagedestinationcreatewithdata?language=objc" target="_blank" rel="noopener">相关详情</a></p></li><li><p>创建所需参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSDictionary *properties = @&#123; (__bridge id)kCGImagePropertyMakerNikonQuality : @(compressionQuality) &#125;;</span><br></pre></td></tr></table></figure></li><li><p>向转换者对象添加图片数据和参数数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGImageDestinationAddImage(destination, image, (__bridge CFDictionaryRef)properties);</span><br></pre></td></tr></table></figure><p><code>CGImageDestinationAddImage(_,_,_)</code> 函数的<a href="https://developer.apple.com/reference/imageio/1464962-cgimagedestinationaddimage?language=objc" target="_blank" rel="noopener">相关详情</a></p></li><li><p>检测转换是否成功, 如失败直接释放数据源与转换者对象, 并结束所有流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (!CGImageDestinationFinalize(destination)) &#123;</span><br><span class="line">    CFRelease(imageData);</span><br><span class="line">    imageData = NULL;</span><br><span class="line">    if (complet) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            complet(NO);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 释放转换者对象</span><br><span class="line">    CFRelease(destination);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>成功后释放转换者对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFRelease(destination);</span><br></pre></td></tr></table></figure></li><li><p>根据输出地址, 创建输出流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CFAllocatorRef allocator = CFAllocatorGetDefault();</span><br><span class="line">NSURL *fileUrl = [NSURL fileURLWithPath:targetImagePatch];</span><br><span class="line">CFWriteStreamRef writeStream = CFWriteStreamCreateWithFile(allocator, (__bridge CFURLRef)fileUrl);</span><br></pre></td></tr></table></figure></li><li><p>开启输出流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFWriteStreamOpen(writeStream);</span><br></pre></td></tr></table></figure></li><li><p>向目标容器写入最终数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFIndex result = CFWriteStreamWrite(writeStream, CFDataGetBytePtr(imageData), CFDataGetLength(imageData));</span><br></pre></td></tr></table></figure><p><code>CFWriteStreamWrite(_,_,_)</code> 函数的<a href="https://developer.apple.com/reference/corefoundation/1539680-cfwritestreamwrite?language=objc" target="_blank" rel="noopener">相关详情</a></p></li><li><p>判断最终数据写入是否成功</p><p>&emsp;&emsp;不成功的返回值为 -1, 成功则为输出的字节流长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (result != -1) &#123;</span><br><span class="line">    if (complet) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            complet(YES);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (complet) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            complet(NO);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关闭输出流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFWriteStreamClose(writeStream);</span><br></pre></td></tr></table></figure></li><li><p>释放目标容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFRelease(imageData);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>&emsp;&emsp;简单使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NSString *sourceImagePath = @&quot;要进行处理的图片的路径&quot;;</span><br><span class="line">NSString *targetImagePath = @&quot;处理完成的输出路径&quot;;</span><br><span class="line">double compressionQuality = 0.75f;</span><br><span class="line">kUTType targetImageType = kUTTypeJPEG;</span><br><span class="line">    </span><br><span class="line">TImageRepresentation(sourceImagePath, targetImagePath, compressionQuality, targetImageType, ^(BOOL isSuccess) &#123;</span><br><span class="line">    if (isSuccess) &#123;</span><br><span class="line">        NSLog(@&quot;Winer&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NSLog(@&quot;Loser&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h3><ul><li><p><a href="https://developer.apple.com/reference/imageio/cgimagedestination?language=objc" target="_blank" rel="noopener">Apple 文档 - CGImage​Destination</a></p></li><li><p><a href="https://developer.apple.com/reference/corefoundation/cfwritestream?language=objc" target="_blank" rel="noopener">Apple 文档 - CFWrite​Stream</a></p></li><li><p><a href="https://developer.apple.com/reference/mobilecoreservices/uttype?language=objc" target="_blank" rel="noopener">Apple 文档 - UTType</a></p></li><li><p><a href="https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-BCGJGJGA" target="_blank" rel="noopener">Apple 文档 - 统一类型标识符 UTI</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在 UIKit 中有两种图片质量压缩与转换的写法:&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UIImageJPEGRepresentation(image, 0.75);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIImagePNGRepresentation(image);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;用 &lt;code&gt;Core Foundation&lt;/code&gt; 实现相同功能&lt;/p&gt;
    
    </summary>
    
      <category term="开发学习" scheme="http://norld.com/categories/%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://norld.com/tags/iOS/"/>
    
      <category term="Core Foundation" scheme="http://norld.com/tags/Core-Foundation/"/>
    
      <category term="Image I/O" scheme="http://norld.com/tags/Image-I-O/"/>
    
      <category term="仿制系统系列" scheme="http://norld.com/tags/%E4%BB%BF%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97/"/>
    
      <category term="图片质量压缩" scheme="http://norld.com/tags/%E5%9B%BE%E7%89%87%E8%B4%A8%E9%87%8F%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="图片转换" scheme="http://norld.com/tags/%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 [super init]</title>
    <link href="http://norld.com/2017/03/15/%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3%20super%20init/"/>
    <id>http://norld.com/2017/03/15/深度理解 super init/</id>
    <published>2017-03-15T07:02:00.000Z</published>
    <updated>2017-03-16T08:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>&emsp;&emsp;创建一个 <code>Test</code> 测试类, 重写初始化方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)init &#123;</span><br><span class="line">   self = [super init];</span><br><span class="line">   if (self) &#123;</span><br><span class="line">       // do something...</span><br><span class="line">   &#125;</span><br><span class="line">   return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问:"></a>疑问:</h3><ul><li>为何要执行 <code>[super init]</code> ?</li><li><code>[super init]</code> 的结果为何要 <code>self</code> 接收?</li></ul><a id="more"></a><h3 id="探索"><a href="#探索" class="headerlink" title="探索:"></a>探索:</h3><ul><li><code>[super init]</code></li></ul><p>&emsp;&emsp;这一句看起来很有迷惑性, 一个 <code>super</code> 关键字, 好像初始化的是父类, 但在码代码的时候可以注意一个细节: 在写 <code>self</code> 时, 代码提示是有返回值类型的, 而写 <code>[super init]</code> 时, 并没有返回值类型, 但在别处写 <code>super</code> 时, 自动提示的返回值类型是父类.</p><p>&emsp;&emsp;这表示在 <code>[super init]</code> 这句话中, <code>super</code> 并不是指父类, 可能只是一个没有什么卵用的关键字, 但在苹果的官方文档中, 这么写是推荐的写法, 那么这句话就很关键了.</p><p>&emsp;&emsp;通过 <code>clang -rewrite-objc Test.m</code> 命令, 重新编译成 cpp 文件, 可以看到这一行代码究竟做了什么:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static instancetype _I_Test_init(Test * self, SEL _cmd) &#123;</span><br><span class="line">    self = ((Test *(*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;Test&quot;))&#125;, sel_registerName(&quot;init&quot;));</span><br><span class="line">    if (self) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;经过简化后, <code>[super init]</code> 就变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objc_msgSendSuper(&#123;self, class_getSuperclass(objc_getClass(&quot;Test&quot;))&#125;, sel_registerName(&quot;init&quot;));</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;而其中 <code>objc_msgSendSuper()</code> 这个方法, API 文档是这样描述的:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OBJC_EXPORT void objc_msgSendSuper(void /* struct objc_super *super, SEL op, ... */ )  OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Sends a message with a simple return value to the superclass of an instance of a class.<br>将具有返回值的消息发送到一个实例的超类.</p></blockquote><p>&emsp;&emsp;第一个参数是 <code>objc_suoer</code> 类型的结构体, 第二个或更多是 <code>SEL</code> 方法选择器, 而在 <code>runtime.m</code> 文档中, <code>objc_super</code> 的结构为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct objc_super &#123;</span><br><span class="line">    __unsafe_unretained id receiver;</span><br><span class="line">    __unsafe_unretained Class super_class;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>receiver</code> 是实例对象, <code>super_class</code> 是用来接收消息的类, 为实例对象的父类.</p><p>&emsp;&emsp;在当前的代码里, <code>receiver</code> 为 <code>self</code> , <code>super_class</code> 为 <code>NSObject</code> .</p><p>&emsp;&emsp;再回过头来, 注意看 <code>[super init]</code> 的 c++ 源码, 返回值为 <code>Test *</code>, 所以在这里的 <code>init</code> 只是向上初始化父类而已.</p><p>&emsp;&emsp;那么这就明了了, <code>[super init]</code> 只是为了将父类, 父类的父类, 父类的父类的父类等等等等, 从 <code>NSObject</code> 开始的所有类都初始化了一遍, 只是为了确保父类的方法, 属性都能正确使用而已.</p><ul><li><code>self = [super init]</code></li></ul><p>&emsp;&emsp;既然明白了 <code>[super init]</code> 做了什么, 那么返回结果再赋值给 <code>self</code> 就基本没有疑问了: 如果在 <code>[super init]</code> 这一步因为一些不明的原因导致初始化失败, 那么返回值应该是为 <code>nil</code> 的, 这时候让 <code>self</code> 接收一下, 之后用 <code>if</code> 判断, 则可以避免一些 BUG.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>为何要执行 <code>[super init]</code> ?<ul><li>为了将当前实例的父类树进行初始化, 以保证继承父类树的所有属性与方法.</li></ul></li><li><code>[super init]</code> 的结果为何要 <code>self</code> 接收?<ul><li>为了确保初始化不会因为失败而 crash.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;创建一个 &lt;code&gt;Test&lt;/code&gt; 测试类, 重写初始化方法:&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   self = [super init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   if (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       // do something...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;疑问&quot;&gt;&lt;a href=&quot;#疑问&quot; class=&quot;headerlink&quot; title=&quot;疑问:&quot;&gt;&lt;/a&gt;疑问:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;为何要执行 &lt;code&gt;[super init]&lt;/code&gt; ?&lt;/li&gt;&lt;li&gt;&lt;code&gt;[super init]&lt;/code&gt; 的结果为何要 &lt;code&gt;self&lt;/code&gt; 接收?&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="开发学习" scheme="http://norld.com/categories/%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://norld.com/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://norld.com/tags/Runtime/"/>
    
      <category term="深入理解" scheme="http://norld.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>HelloWorld</title>
    <link href="http://norld.com/2017/01/13/HelloWorld/"/>
    <id>http://norld.com/2017/01/13/HelloWorld/</id>
    <published>2017-01-13T04:33:00.000Z</published>
    <updated>2017-07-12T05:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h3><p>hello world!<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;Foundation/Foundation.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    NSLog(@&quot;Hello world!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新的开始&quot;&gt;&lt;a href=&quot;#新的开始&quot; class=&quot;headerlink&quot; title=&quot;新的开始&quot;&gt;&lt;/a&gt;新的开始&lt;/h3&gt;&lt;p&gt;hello world!&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
