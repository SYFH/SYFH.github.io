<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Norld&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.norld.com/"/>
  <updated>2017-03-16T00:34:07.000Z</updated>
  <id>http://blog.norld.com/</id>
  
  <author>
    <name>Norld</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解 [super init]</title>
    <link href="http://blog.norld.com/2017/03/15/%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3%20super%20init/"/>
    <id>http://blog.norld.com/2017/03/15/深度理解 super init/</id>
    <published>2017-03-15T07:02:00.000Z</published>
    <updated>2017-03-16T00:34:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>&emsp;&emsp;创建一个 <code>Test</code> 测试类, 重写初始化方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (instancetype)init &#123;</div><div class="line">   self = [super init];</div><div class="line">   if (self) &#123;</div><div class="line">       // do something...</div><div class="line">   &#125;</div><div class="line">   return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问:"></a>疑问:</h3><ul><li>为何要执行 <code>[super init]</code> ?</li><li><code>[super init]</code> 的结果为何要 <code>self</code> 接收?</li></ul><a id="more"></a><h3 id="探索"><a href="#探索" class="headerlink" title="探索:"></a>探索:</h3><ul><li><code>[super init]</code></li></ul><p>&emsp;&emsp;这一句看起来很有迷惑性, 一个 <code>super</code> 关键字, 好像初始化的是父类, 但在码代码的时候可以注意一个细节: 在写 <code>self</code> 时, 代码提示是有类型的, 而写 <code>[super init]</code> 时, 并没有类型, 但在别处写 <code>super</code> 时, 自动提示的类型是父类.</p><p>&emsp;&emsp;这表示在 <code>[super init]</code> 这句话中, <code>super</code> 并不是指父类, 可能只是一个没有什么卵用的关键字, 但在苹果的官方文档中, 这么写是推荐的写法, 那么这句话就很关键了.</p><p>&emsp;&emsp;通过 <code>clang -rewrite-objc Test.m</code> 命令, 重新编译成 cpp 文件, 可以看到这一行代码究竟做了什么:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">static instancetype _I_Test_init(Test * self, SEL _cmd) &#123;</div><div class="line">    self = ((Test *(*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;Test&quot;))&#125;, sel_registerName(&quot;init&quot;));</div><div class="line">    if (self) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&emsp;&emsp;经过简化后, <code>[super init]</code> 就变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSendSuper(&#123;self, class_getSuperclass(objc_getClass(&quot;Test&quot;))&#125;, sel_registerName(&quot;init&quot;));</div></pre></td></tr></table></figure><p>&emsp;&emsp;而其中 <code>objc_msgSendSuper()</code> 这个方法, API 文档是这样描述的:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; OBJC_EXPORT void objc_msgSendSuper(void /* struct objc_super *super, SEL op, ... */ )  OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0);</div></pre></td></tr></table></figure><p>Sends a message with a simple return value to the superclass of an instance of a class.<br>将具有返回值的消息发送到一个实例的超类.</p></blockquote><p>&emsp;&emsp;第一个参数是 <code>objc_suoer</code> 类型的结构体, 第二个或更多是 <code>SEL</code> 方法选择器, 而在 <code>runtime.m</code> 文档中, <code>objc_super</code> 的结构为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct objc_super &#123;</div><div class="line">    __unsafe_unretained id receiver;</div><div class="line">    __unsafe_unretained Class super_class;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>&emsp;&emsp;<code>receiver</code> 是实例对象的类, <code>super_class</code> 是用来接收消息的类, 为实例对象的父类.</p><p>&emsp;&emsp;在当前的代码里, <code>receiver</code> 为 <code>self</code> , <code>super_class</code> 为 <code>NSObject</code> .</p><p>&emsp;&emsp;再回过头来, 注意看 <code>[super init]</code> 的 c++ 源码, 返回值为 <code>Test *</code>, 所以在这里的 <code>init</code> 只是向上初始化父类而已.</p><p>&emsp;&emsp;那么这就明了了, <code>[super init]</code> 只是为了将父类, 父类的父类, 父类的父类的父类等等等等, 从 <code>NSObject</code> 开始的所有类都初始化了一遍, 只是为了确保父类的方法, 属性都能正确使用而已.</p><ul><li><code>self = [super init]</code></li></ul><p>&emsp;&emsp;既然明白了 <code>[super init]</code> 做了什么, 那么返回结果再赋值给 <code>self</code> 就基本没有疑问了: 如果在 <code>[super init]</code> 这一步因为一些不明的原因导致初始化失败, 那么返回值应该是为 <code>nil</code> 的, 这时候让 <code>self</code> 接收一下, 之后用 <code>if</code> 判断, 则可以避免一些 BUG.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>为何要执行 <code>[super init]</code> ?<ul><li>为了将当前实例的父类树进行初始化, 以保证继承父类树的所有属性与方法.</li></ul></li><li><code>[super init]</code> 的结果为何要 <code>self</code> 接收?<ul><li>为了确保初始化不会因为失败而 crash.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;创建一个 &lt;code&gt;Test&lt;/code&gt; 测试类, 重写初始化方法:&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   self = [super init];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   if (self) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       // do something...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return self;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;疑问&quot;&gt;&lt;a href=&quot;#疑问&quot; class=&quot;headerlink&quot; title=&quot;疑问:&quot;&gt;&lt;/a&gt;疑问:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;为何要执行 &lt;code&gt;[super init]&lt;/code&gt; ?&lt;/li&gt;&lt;li&gt;&lt;code&gt;[super init]&lt;/code&gt; 的结果为何要 &lt;code&gt;self&lt;/code&gt; 接收?&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="开发学习" scheme="http://blog.norld.com/categories/%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://blog.norld.com/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://blog.norld.com/tags/Runtime/"/>
    
      <category term="深入理解" scheme="http://blog.norld.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>HelloWorld</title>
    <link href="http://blog.norld.com/2017/01/13/HelloWorld/"/>
    <id>http://blog.norld.com/2017/01/13/HelloWorld/</id>
    <published>2017-01-13T04:33:00.000Z</published>
    <updated>2017-01-13T05:36:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h3><p>hello world!<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &quot;Foundation/Foundation.h&quot;</div><div class="line"></div><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    NSLog(@&quot;Hello world!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新的开始&quot;&gt;&lt;a href=&quot;#新的开始&quot; class=&quot;headerlink&quot; title=&quot;新的开始&quot;&gt;&lt;/a&gt;新的开始&lt;/h3&gt;&lt;p&gt;hello world!&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
